
plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-parcelize'
    id "org.jlleitschuh.gradle.ktlint" version "9.4.1"
    id "io.gitlab.arturbosch.detekt" version "1.15.0"
    id 'jacoco'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "com.changui.dvtweatherappandroid"
        minSdkVersion 16
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation":"$projectDir/schemas".toString(),
                        "room.incremental":"true"]
            }
        }
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            testCoverageEnabled = true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    testOptions {
        animationsDisabled = true
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
            all {
                jacoco {
                    includeNoLocationClasses = true
                }
            }
        }
    }

    hilt {
        enableTransformForLocalTests = true
    }

    buildFeatures {
        viewBinding true
    }
}

dependencies {
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.5'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.5'
    def lifecycle_version = "2.3.1"
    def retrofit_version = "2.9.0"
    def okhttp_version = "4.9.0"
    def room_version = "2.3.0"
    def arrow_version = "0.13.2"
    def mockWebserverVersion = "4.7.2"
    def coroutines_version = "1.4.2"

    implementation "androidx.multidex:multidex:2.0.1"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.fragment:fragment-ktx:1.3.5'
    implementation "androidx.recyclerview:recyclerview:1.1.0"
    implementation "io.arrow-kt:arrow-core:$arrow_version"
    implementation 'com.google.android.gms:play-services-location:18.0.0'
    implementation 'com.google.android.gms:play-services-maps:17.0.1'
    implementation 'com.github.fondesa:kpermissions:3.2.1'
    implementation 'joda-time:joda-time:2.10.10'
    implementation 'net.sourceforge.streamsupport:android-retrostreams:1.7.3'
    implementation 'com.github.fondesa:kpermissions-coroutines:3.2.1'
    implementation 'com.google.android.libraries.places:places:2.4.0'

    // architecture components
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:$lifecycle_version"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    implementation 'android.arch.navigation:navigation-fragment:1.0.0'
    implementation 'android.arch.navigation:navigation-ui:1.0.0'
    // network
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"

    // reactive streams
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    implementation "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:0.9.2"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.4.2'

    // image
    implementation "io.coil-kt:coil:1.1.1"

    // di
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-compiler:$hilt_version"

    // debugging
    implementation 'com.orhanobut:logger:2.2.0'

    // unit tests
    implementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'junit:junit:4.12'
    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    testImplementation "io.mockk:mockk:1.9.3"
    testImplementation "org.mockito:mockito-core:3.9.0"
    testImplementation "org.mockito:mockito-inline:3.8.0"
    testImplementation "com.squareup.okhttp3:mockwebserver:$mockWebserverVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.7.0"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.7.0"
    testImplementation "androidx.test:core-ktx:1.4.0"
    testImplementation 'org.amshove.kluent:kluent:1.50'

    // integration test
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

detekt {
    buildUponDefaultConfig = true // preconfigure defaults
    config = rootProject.files("config/detekt/detekt.yml")
    reports {
        xml {
            enabled = true
            destination = file("build/reports/detekt.xml")
        }
        // Enable/Disable HTML report (default: true)
        html {
            enabled = true
            destination = file("build/reports/detekt.html")
        }
        // Enable/Disable TXT report (default: true)
        txt {
            enabled = true
            destination = file("build/reports/detekt.txt")
        }
    }
}

jacoco {
    toolVersion = "0.8.7"
}

ktlint {
    debug.set(true)
    enableExperimentalRules.set(true)
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
        "jacoco/testDebugUnitTest.exec",
        "outputs/code-coverage/connected/*coverage.ec"
    ]))
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}


